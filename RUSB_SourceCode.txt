const { chromium } = require('playwright');
const readline = require('readline');

// ANSI escape codes for text styling
const cyan = '\x1b[36m';  // Cyan color
const bold = '\x1b[1m';   // Bold text
const yellow = '\x1b[33m';  // Yellow color
const green = '\x1b[32m';  // Green color
const reset = '\x1b[0m';  // Reset styling

// Big bold "Reddit Ultimate Share Bot" header in ASCII art
const header = `
${cyan}${bold}

███╗   ██╗██╗███████╗████████╗██╗   ██╗     ███████╗██╗  ██╗██╗██████╗ ██████╗ ██╗███████╗
████╗  ██║██║██╔════╝╚══██╔══╝╚██╗ ██╔╝     ██╔════╝██║ ██╔╝██║██╔══██╗██╔══██╗██║██╔════╝
██╔██╗ ██║██║█████╗     ██║    ╚████╔╝█████╗███████╗█████╔╝ ██║██║  ██║██║  ██║██║█████╗  
██║╚██╗██║██║██╔══╝     ██║     ╚██╔╝ ╚════╝╚════██║██╔═██╗ ██║██║  ██║██║  ██║██║██╔══╝  
██║ ╚████║██║██║        ██║      ██║        ███████║██║  ██╗██║██████╔╝██████╔╝██║███████╗
╚═╝  ╚═══╝╚═╝╚═╝        ╚═╝      ╚═╝        ╚══════╝╚═╝  ╚═╝╚═╝╚═════╝ ╚═════╝ ╚═╝╚══════╝
                                                                                                                                                                                                                                                          
                         ${reset}${cyan}Ultimate Share Bot v1.0 by NIFTY-SKIDDIE | GITHUB: https://github.com/NIFTY-SKIDDIE${reset}
`;

console.log(header);

(async () => {
  // Create a readline interface for input
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  // Prompt for the number of iterations (predefined options)
  const getIterations = () => new Promise((resolve) => {
    rl.question(`How many shares would you like? Choose ${yellow}1${reset} for 100 or ${yellow}2${reset} for 1000: `, (choice) => {
      if (choice === '1') {
        resolve(100);
      } else if (choice === '2') {
        resolve(1000);
      } else {
        console.log('Invalid option. Please choose 1 for 100 or 2 for 1000.');
        getIterations(); // Re-prompt if the input is invalid
      }
    });
  });

  const maxIterations = await getIterations();
  rl.close(); // Close the input after getting the number of iterations

  // Launch browser in full-screen mode
  const browser = await chromium.launch({
    headless: false,
    args: ['--start-maximized']
  });

  // Create a new context with no viewport constraints
  const context = await browser.newContext({
    viewport: null
  });

  const page = await context.newPage();

  // Navigate to Reddit homepage
  console.log('Opening Reddit on Chrome browser...');
  await page.goto('https://www.reddit.com');
  

  // Click the login button (XPath: //a[@id="login-button"])
  await page.click('//a[@id="login-button"]');

  console.log('Please log in to your user to proceed');

  // Variable to track login status
  let loginMessageShown = false;

  // Function to check if any user avatar exists to confirm login
  const isLoggedIn = async () => {
    try {
      // Check for any <image> element with alt="User Avatar"
      const avatar = await page.$('image[alt="User Avatar"]');
      return !!avatar; // Return true if any avatar image is found
    } catch (error) {
      return false;
    }
  };

  // Wait for user to log in with a timeout
  const maxWaitTime = 300000; // 5 minutes
  const startTime = Date.now();
  let loggedIn = false;

  while (!loggedIn && Date.now() - startTime < maxWaitTime) {
    loggedIn = await isLoggedIn();
    if (!loggedIn && !loginMessageShown) {
      console.log('Waiting for login confirmation...');
      loginMessageShown = true; // Only show the message once
    }
    if (!loggedIn) {
      await page.waitForTimeout(2000); // Check every 2 seconds
    }
  }

  if (!loggedIn) {
    console.error('Timeout: User login was not detected in 5 minutes');
    await browser.close();
    return;
  }

  console.log('User logged in successfully. Proceeding...');

  // Make sure stdin is in the right mode
  process.stdin.setRawMode(true);
  process.stdin.resume();

  // Listen for "ESC" key press to terminate the script prematurely
  process.stdin.on('data', (key) => {
    if (key.toString() === '\u001b') { // Check for ESC key (ASCII code for ESC is 27, which is '\u001b')
      console.log('Exiting...');
      process.exit(0); // Exit the script when ESC is pressed
    }
  });

  try {
    // Wait for page to load and all "Share" buttons to appear
    await page.waitForSelector('button:has-text("Share")', { timeout: 10000 });

    // Define a function to click a "Share" button and "Copy Link" within shadow DOM
    const clickShareButton = async (button, index) => {
      try {
        // Click the "Share" button
        await button.click();

        // Wait for the modal to appear
        await page.waitForTimeout(250);

        // Use page.$ to get an ElementHandle instead of evaluateHandle
        const copyLinkButton = await page.$('faceplate-menu .share-menu-copy-link-option div[tabindex="0"]');

        if (copyLinkButton) {
          // Click the "Copy link" button
          await copyLinkButton.click();
          // console.log(`Successfully shared post at index ${index} - You can press 'ESC' to terminate the program.`);
          
          // Wait a bit for the copy operation to complete
          await page.waitForTimeout(100);
          
          // Click outside to close the modal (optional)
          await page.mouse.click(0, 0);
        } else {
          console.log(`Could not find "Copy link" button for share button at index ${index}`);
        }
      } catch (error) {
        console.error(`Error clicking "Copy link" for share button at index ${index}:`, error);
      }

      // // Wait before processing the next button
      // await page.waitForTimeout(150);
    };

    let iterationCount = 0;

    // Infinite loop to keep checking for new "Share" buttons until reaching max iterations
    while (iterationCount < maxIterations) {
      // Get all "Share" buttons
      const shareButtons = await page.$$('button:has-text("Share")');
      console.log(`Found ${shareButtons.length} share buttons`);

      if (shareButtons.length > 0) {
        // Iterate over all share buttons
        for (let i = 0; i < shareButtons.length; i++) {
          await clickShareButton(shareButtons[i], i);
          iterationCount++;

          console.log(`Successfully shared post ${iterationCount} of ${maxIterations} - You can press 'ESC' to terminate the program.`);

          // Stop when we've reached the max iterations
          if (iterationCount >= maxIterations) break;
          
          // // Add a small delay between processing share buttons
          // await page.waitForTimeout(150);
        }
      } else {
        console.log('No share buttons found, waiting for new ones...');
      }

      // Wait a bit before checking again
      await page.waitForTimeout(500); // Check every 500ms
    }

    // Success message in green
    console.log(`${green}Successfully finished sharing this many posts: ${iterationCount}${reset}`);

  } catch (error) {
    console.error('An error occurred during execution:', error);
  } finally {
    // Browser closing logic
    console.log('Closing browser...');
    await browser.close(); // Ensure the browser is closed after processing is done
  }
})();
